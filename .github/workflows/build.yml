name: Build verification

on:
  push:
  pull_request:
  release:

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Windows Latest MSVC (C++17)",
            os: windows-latest,
            build_type: "Debug",
            cc: "cl",
            cxx: "cl",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            generators: "Visual Studio 17 2022"
          }
          - {
            name: "Ubuntu Latest GCC (C++17)",
            os: ubuntu-latest,
            build_type: "Debug",
            cc: "gcc",
            cxx: "g++",
            generators: "Ninja"
          }
          #- {
          #  name: "macOS Latest Clang (C++17)",
          #  os: macos-latest,
          #  build_type: "Debug",
          #  cc: "clang",
          #  cxx: "clang++",
          #  generators: "Xcode"
          #}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Print env
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}
      - name: Install dependencies on windows
        if: startsWith(matrix.config.os, 'windows')
        run: |
          choco install ninja cmake
          ninja --version
          cmake --version
      - name: Install dependencies on ubuntu
        if: startsWith(matrix.config.name, 'Ubuntu Latest GCC')
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build cmake libtbb-dev
          sudo apt-get install xorg-dev libglu1-mesa-dev
          sudo apt-get install -y libxrandr-dev
          ninja --version
          cmake --version
          gcc --version
      - name: Install dependencies on macos
        if: startsWith(matrix.config.os, 'macos')
        run: |
          brew install cmake ninja
          ninja --version
          cmake --version

      - name: Configure C++17
        shell: bash
        if: contains(matrix.config.name, 'C++17')
        run: |
          mkdir build
          cmake \
            -S . \
            -B build \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
            -DCMAKE_CXX_STANDARD=17 \
            -DBoost_DEBUG=0 \
            -G "${{ matrix.config.generators }}"
      - name: Build
        shell: bash
        run: cmake --build build --config ${{ matrix.config.build_type }}